{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","changeDarkTheme","theme","toggleDarkTheme","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","onClick","toggleMode","role","defaultProps","TextForm","text","setText","useState","detect","LanguageDetect","language","setDetectedLanguage","Fragment","style","color","heading","value","onChange","event","target","rows","backgroundColor","darkTheme","handleUpClick","newText","toUpperCase","showAlert","handleLoClick","toLowerCase","handleDetectLanguage","trim","length","copyText","el","document","getElementById","select","navigator","clipboard","writeText","extractSpaces","split","join","handleClearClick","filter","propTyps","PropTypes","string","isRequired","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","bgColor","setBgColor","setDarkTheme","message","setTimeout","changeBgColor","clr","body","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.968bc48e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { a } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  const changeDarkTheme = (theme) => {\r\n    if (theme === \"default\") {\r\n      props.toggleDarkTheme(\"default\");\r\n    } else if (theme === \"Blue\") {\r\n      props.toggleDarkTheme(\"Blue\");\r\n    } else if (theme === \"Green\") {\r\n      props.toggleDarkTheme(\"Green\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"#\">\r\n                {props.aboutText}\r\n              </a>\r\n            </li>\r\n          </ul>\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"dark\" ? \"light\" : \"dark\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              onClick={props.toggleMode}\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            {/* <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label> */}\r\n            <div className=\"dropdown-center\">\r\n              <button\r\n                className=\"navbar-toggler\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#navbarNavDarkDropdown\"\r\n                aria-controls=\"navbarNavDarkDropdown\"\r\n                aria-expanded=\"false\"\r\n                aria-label=\"Toggle navigation\"\r\n              >\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n              </button>\r\n              <div\r\n                className=\"collapse navbar-collapse\"\r\n                id=\"navbarNavDarkDropdown\"\r\n              >\r\n                <ul className=\"navbar-nav\">\r\n                  <li className=\"nav-item dropdown\">\r\n                    <button\r\n                      className={`btn btn-sm btn-${props.mode} dropdown-toggle`}\r\n                      data-bs-toggle=\"dropdown\"\r\n                      aria-expanded=\"false\"\r\n                    >\r\n                      {props.mode === \"dark\" ? \"Dark\" : \"Light\"} Mode\r\n                    </button>\r\n                    <ul className={`dropdown-menu dropdown-menu-${props.mode}`}>\r\n                      <li>\r\n                        <label\r\n                          className=\"dropdown-item\"\r\n                          onClick={() => changeDarkTheme(\"default\")}\r\n                        >\r\n                          Default\r\n                        </label>\r\n                      </li>\r\n                      <li>\r\n                        <label\r\n                          className=\"dropdown-item\"\r\n                          onClick={() => changeDarkTheme(\"Blue\")}\r\n                        >\r\n                          Blue\r\n                        </label>\r\n                      </li>\r\n                      <li>\r\n                        <label\r\n                          className=\"dropdown-item\"\r\n                          onClick={() => changeDarkTheme(\"Green\")}\r\n                        >\r\n                          Green\r\n                        </label>\r\n                      </li>\r\n                    </ul>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n            <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n          </form> */}\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.defaultProps = { title: \"Set Title Here\", aboutText: \"About Text Here\" };\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n","import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport LanguageDetect from 'languagedetect';\r\n\r\nexport default function TextForm(props) {\r\n  // const arrayColumn = (arr, n) => arr.map(x => x[n]+'\\n');\r\n  const [text,setText] = useState(\"\");\r\n  let detect = new LanguageDetect();\r\n  const [language,setDetectedLanguage] = useState(\"English\");\r\n  const handleUpClick = ()=>{\r\n    // console.log('Upper case button clicked');\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Text has been converted to uppercase.\",\"success\");\r\n  }\r\n  const handleOnChange = (event)=>{\r\n    setText(event.target.value);\r\n    // console.log('On change');\r\n  }\r\n  const handleLoClick = ()=>{\r\n    setText(text.toLowerCase());\r\n    props.showAlert(\"Text has been converted to lowercase.\",\"success\");\r\n    // console.log(text.split(\" \") + text.split(\" \").length);\r\n  }\r\n  const handleClearClick = ()=>{\r\n    setText('');\r\n    props.showAlert(\"Text has been cleared.\",\"success\");\r\n  }\r\n  const handleDetectLanguage = ()=>{\r\n    // console.log(detect.detect(text)[0][0]);\r\n    if(text.trim().length>0){\r\n      setDetectedLanguage(detect.detect(text)[0][0]);\r\n    }\r\n    props.showAlert(\"Text language has been detected.\",\"success\");\r\n  }\r\n  const copyText = ()=>{\r\n    const el = document.getElementById('mybox');\r\n    el.select();\r\n    navigator.clipboard.writeText(el.value);\r\n    props.showAlert(\"Text has been copied to clipboard.\",\"success\");\r\n  }\r\n  const extractSpaces = ()=>{\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces has been removed.\",\"success\");\r\n  }\r\n  return (\r\n    <>\r\n      <div className='container'>\r\n          <div className={`mb-3`} style={{color:props.mode === 'dark'?'white':'#042743'}}>\r\n              <h2>{props.heading}</h2>\r\n              {/* <label htmlFor=\"myox\" className=\"form-label\">Example textarea</label> */}\r\n              <textarea className=\"form-control\" id=\"mybox\" value={text} onChange={handleOnChange} rows=\"8\" style={{backgroundColor:props.mode === 'dark'?'grey':'white',color:props.mode === 'dark'?'white':'black'}}></textarea>\r\n          </div>\r\n          <button type=\"button\" className={`btn btn-${props.darkTheme === 'Green'?'success':'primary'} mx-2`} onClick={handleUpClick}>UpperCase</button>\r\n          <button type=\"button\" className={`btn btn-${props.darkTheme === 'Green'?'success':'primary'} mx-2`} onClick={handleLoClick}>LowerCase</button>\r\n          <button type=\"button\" className={`btn btn-${props.darkTheme === 'Green'?'success':'primary'} mx-2`} onClick={handleDetectLanguage}>Detect Language</button>\r\n          <button type=\"button\" className={`btn btn-${props.darkTheme === 'Green'?'success':'primary'} mx-2`} onClick={copyText}>Copy Text</button>\r\n          <button type=\"button\" className={`btn btn-${props.darkTheme === 'Green'?'success':'primary'} mx-2`} onClick={extractSpaces}>Extract Spaces</button>\r\n          <button type=\"button\" className=\"btn btn-danger mx-2\" onClick={handleClearClick}>Clear</button>\r\n      </div>\r\n      <div className={`container my-3`} style={{color:props.mode === 'dark'?'white':'#042743'}}>\r\n        <h1>Your text summary</h1>\r\n        <p>Language of the entered text is {language.toUpperCase()}.</p>\r\n        <p>Your text has {(text.trim().split(/\\s+/)).filter(text=>text.length>0).length} words and {text.trim().length} characters.</p>\r\n        <p>Text can be read in {0.008*text.trim().split(/\\s+/).length} minutes.</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text.trim():\"Enter some text in text area to preview.\"}</p>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nTextForm.propTyps = {heading:PropTypes.string.isRequired}","import React from \"react\";\r\n\r\nfunction Alert(props){\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg} \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Alert;","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport TextForm from \"./components/TextForm\";\r\nimport Alert from \"./components/Alert\";\r\n// import { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\r\n// import About from \"./components/About\";\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState(\"light\");\r\n  const [alert, setAlert] = useState(null);\r\n  const [bgColor, setBgColor] = useState(\"#bfc0f7\");\r\n  const [darkTheme, setDarkTheme] = useState(\"default\");\r\n\r\n  const showAlert = (message, type) => {\r\n    setAlert({\r\n      msg: message,\r\n      type: type,\r\n    });\r\n    setTimeout(() => setAlert(null), 1200);\r\n  };\r\n\r\n  const changeBgColor = (clr) => {\r\n    setBgColor(clr);\r\n    document.body.style.backgroundColor = bgColor;\r\n  };\r\n\r\n  const toggleMode = () => {\r\n    if (mode === \"light\") {\r\n      setMode(\"dark\");\r\n      if (darkTheme === \"default\") {\r\n        changeBgColor(\"black\");\r\n      } else if (darkTheme === \"Blue\") {\r\n        changeBgColor(\"#042743\");\r\n        // document.body.style.backgroundColor = '#042743';\r\n      } else if (darkTheme === \"Green\") {\r\n        changeBgColor(\"#0f5032\");\r\n        // document.body.style.backgroundColor = '#0f5032';\r\n      }\r\n      showAlert(\"Dark mode has been enabled\", \"success\");\r\n    } else {\r\n      setMode(\"light\");\r\n      if (darkTheme === \"default\") {\r\n        changeBgColor(\"#bfc0f7\");\r\n        // document.body.style.backgroundColor = '#bfc0f7'\r\n      } else if (darkTheme === \"Blue\") {\r\n        changeBgColor(\"#c4e9ff\");\r\n        // document.body.style.backgroundColor = '#c4e9ff';\r\n      } else if (darkTheme === \"Green\") {\r\n        changeBgColor(\"#bcfbc7\");\r\n        // document.body.style.backgroundColor = '#bcfbc7';\r\n      }\r\n      showAlert(\"Dark Mode has been disabled\", \"success\");\r\n    }\r\n  };\r\n  const toggleDarkTheme = (theme) => {\r\n    setDarkTheme(theme);\r\n  };\r\n\r\n  if (mode === \"dark\") {\r\n    if (darkTheme === \"default\") {\r\n      document.body.style.backgroundColor = \"black\";\r\n    } else if (darkTheme === \"Blue\") {\r\n      document.body.style.backgroundColor = \"#042743\";\r\n    } else if (darkTheme === \"Green\") {\r\n      document.body.style.backgroundColor = \"#0f5032\";\r\n    }\r\n    document.title = \"TextUtils DarkMode\";\r\n  } else {\r\n    if (darkTheme === \"default\") {\r\n      document.body.style.backgroundColor = \"#bfc0f7\";\r\n    } else if (darkTheme === \"Blue\") {\r\n      document.body.style.backgroundColor = \"#c4e9ff\";\r\n    } else if (darkTheme === \"Green\") {\r\n      document.body.style.backgroundColor = \"#bcfbc7\";\r\n    }\r\n    document.title = \"TextUtils\";\r\n    // setInterval(()=>document.title = 'its interval time',1500);\r\n    // setInterval(()=>document.title = 'interval over',1000);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Navbar\r\n        title=\"TextUtils\"\r\n        mode={mode}\r\n        aboutText=\"About TextUtils\"\r\n        toggleMode={toggleMode}\r\n        toggleDarkTheme={toggleDarkTheme}\r\n      />\r\n      <Alert alert={alert} />\r\n      <div className=\"container my-3\">\r\n        <TextForm\r\n          heading=\"Enter text to Analyze Below\"\r\n          mode={mode}\r\n          showAlert={showAlert}\r\n          darkTheme={darkTheme}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}